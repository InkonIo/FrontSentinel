// components/ForMap/PolygonDrawMap.jsx
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import MapComponent from './MapComponent';
import MapSidebar from './MapSidebar';
import ToastNotification from './ToastNotification';
import ConfirmDialog from './ConfirmDialog';
import PolygonAnalysisLayer from './PolygonAnalysisLayer';
import LayerSelectionBlock from './LayerSelectionBlock';
import UserSelectionBlock from './UserSelectionBlock';
import * as L from 'leaflet';
import './Map.css';
import { jwtDecode } from 'jwt-decode';

const BASE_API_URL = 'http://localhost:8080';

async function parseResponseBody(response) {
  const contentType = response.headers.get("content-type");
  if (contentType && contentType.includes("application/json")) {
    try {
      return await response.json();
    } catch (e) {
      console.error("Failed to parse JSON, falling back to text:", e);
      return await response.text();
    }
  } else {
    return await response.text();
  }
}

const ensurePolygonClosed = (coordinates) => {
  if (!coordinates || coordinates.length < 3) {
    return coordinates;
  }
  let cleanedCoordinates = [...coordinates];
  while (cleanedCoordinates.length >= 2 &&
         cleanedCoordinates[cleanedCoordinates.length - 1][0] === cleanedCoordinates[cleanedCoordinates.length - 2][0] &&
         cleanedCoordinates[cleanedCoordinates.length - 1][1] === cleanedCoordinates[cleanedCoordinates.length - 2][1]) {
    cleanedCoordinates.pop();
  }
  const firstPoint = cleanedCoordinates[0];
  const lastPoint = cleanedCoordinates[cleanedCoordinates.length - 1];
  if (firstPoint[0] !== lastPoint[0] || firstPoint[1] !== lastPoint[1]) {
    return [...cleanedCoordinates, firstPoint];
  }
  return cleanedCoordinates;
};


export default function PolygonDrawMap({ handleLogout }) {
  const [polygons, setPolygons] = useState([]);
  const [isDrawing, setIsDrawing] = useState(false);
  const [isEditingMode, setIsEditingMode] = useState(false);
  const [selectedPolygon, setSelectedPolygon] = useState(null);
  const [editingMapPolygon, setEditingMapPolygon] = useState(null);
  const editableFGRef = useRef(); // <--- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞

  const [toast, setToast] = useState({ message: '', type: '', visible: false });
  const [drawnPointsCount, setDrawnPointsCount] = useState(0);

  const [isSavingPolygon, setIsSavingPolygon] = useState(false);
  const [isFetchingPolygons, setIsFetchingPolygons] = useState(false);
  const [showClearAllConfirm, setShowClearAllConfirm] = useState(false);

  const [activeAnalysisType, setActiveAnalysisType] = useState('none');
  const [analysisDateRange, setAnalysisDateRange] = useState({ from: '', to: '' });
  const [isAnalysisLoading, setIsAnalysisLoading] = useState(false);

  const [activeBaseMapType, setActiveBaseMapType] = useState('openstreetmap');

  const [userRole, setUserRole] = useState(null);
  const [allUsers, setAllUsers] = useState([]);
  const [selectedUserForAdminView, setSelectedUserForAdminView] = useState(null);

  // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã LayerSelectionBlock
  const [layerBlockHeight, setLayerBlockHeight] = useState(0);
  const layerBlockInitialBottom = 35; // –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ 'bottom' –∏–∑ LayerSelectionBlock

  const navigate = useNavigate();

  const showToast = useCallback((message, type = 'info') => {
    setToast({ message, type, visible: true });
    const timer = setTimeout(() => {
      setToast(prev => ({ ...prev, visible: false }));
    }, 5000);
    return () => clearTimeout(timer);
  }, []);

  const calculateArea = useCallback((coordinates) => {
    if (coordinates.length < 3) return 0;

    const R = 6378137;
    let area = 0;

    for (let i = 0, len = coordinates.length; i < len; i++) {
      const [lat1, lon1] = coordinates[i];
      const [lat2, lon2] = coordinates[(i + 1) % len];

      const phi1 = (lat1 * Math.PI) / 180;
      const phi2 = (lat2 * Math.PI) / 180;
      const dLambda = ((lon2 - lon1) * Math.PI) / 180;

      area += dLambda * (2 + Math.sin(phi1) + Math.sin(phi2));
    }

    area = (area * R * R) / 2.0;
    return Math.abs(area);
  }, []);

  const formatArea = useCallback((area) => {
    if (area < 10000) return `${area.toFixed(1)} –º¬≤`;
    if (area < 1000000) return `${(area / 10000).toFixed(1)} –≥–∞`;
    return `${(area / 1000000).toFixed(1)} –∫–º¬≤`;
  }, []);

  const savePolygonToDatabase = useCallback(async (polygonData, isUpdate = false) => {
    const { id, name, coordinates, crop, comment, color } = polygonData;
    if (!name || name.trim() === '') {
      showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.', 'error');
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
      return;
    }
    let geoJsonCoords = ensurePolygonClosed(coordinates).map(coord => [coord[1], coord[0]]);
    const geoJsonGeometry = {
        type: "Polygon",
        coordinates: [geoJsonCoords]
    };
    const geoJsonString = JSON.stringify(geoJsonGeometry);
    const token = localStorage.getItem('token');
    if (!token) {
      showToast('–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'error');
      if (handleLogout) handleLogout();
      else navigate('/login');
      return;
    }
    setIsSavingPolygon(true);
    try {
      const method = isUpdate ? 'PUT' : 'POST';
      const url = isUpdate ? `${BASE_API_URL}/api/polygons/${id}` : `${BASE_API_URL}/api/polygons/create`;
      const response = await fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          id: isUpdate ? id : undefined,
          geoJson: geoJsonString,
          name: name,
          crop: crop || null,
          comment: comment || null,
          color: color || '#0000FF'
        }),
      });
      const responseBody = await parseResponseBody(response);
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ ${isUpdate ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' : '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'} –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${response.status}`);
      }
      
      showToast(`–ü–æ–ª–∏–≥–æ–Ω "${name}" —É—Å–ø–µ—à–Ω–æ ${isUpdate ? '–æ–±–Ω–æ–≤–ª–µ–Ω' : '—Å–æ—Ö—Ä–∞–Ω–µ–Ω'} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!`, 'success');

      if (!isUpdate) {
        const actualPolygonId = (typeof responseBody === 'object' && responseBody?.id) ? responseBody.id : (typeof responseBody === 'string' ? responseBody : id);
        setPolygons(prev => prev.map(p => p.id === id ? { ...p, id: String(actualPolygonId) } : p));
      } else {
        setPolygons(prev => prev.map(p => p.id === id ? { ...polygonData } : p));
        
        setSelectedPolygon(null);
        setIsEditingMode(false);
      }

    } catch (error) {
      showToast(`–ù–µ —É–¥–∞–ª–æ—Å—å ${isUpdate ? '–æ–±–Ω–æ–≤–∏—Ç—å' : '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å'} –ø–æ–ª–∏–≥–æ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${error.message}`, 'error');
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ ${isUpdate ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' : '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏'} –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:`, error);
    } finally {
      setIsSavingPolygon(false);
    }
  }, [showToast, handleLogout, navigate, setSelectedPolygon, setIsEditingMode]);

  const startDrawing = () => {
    setIsDrawing(true);
    setSelectedPolygon(null);
    setIsEditingMode(false);
    setEditingMapPolygon(null);
    editableFGRef.current?.clearLayers();
    setDrawnPointsCount(0);
    showToast(
      'üìç –†–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞ –∫–∞—Ä—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–µ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É.',
      'info'
    );
  };

  const handlePointAdded = useCallback(() => {
    setDrawnPointsCount(prevCount => {
      const newCount = prevCount + 1;
      return newCount;
    });
  }, []);

  useEffect(() => {
    if (isDrawing) {
      if (drawnPointsCount === 1) {
        showToast('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ç–æ—á–∫–∏. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏.', 'info');
      } else if (drawnPointsCount >= 3) {
        showToast('–í—ã –Ω–∞—Ä–∏—Å–æ–≤–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫. –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞.', 'info');
      }
    }
  }, [drawnPointsCount, isDrawing, showToast]);

  const stopDrawing = () => {
    if (window.clearCurrentPath) {
      window.clearCurrentPath();
    }
    showToast('–†–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', 'info');
  };

  const onPolygonComplete = useCallback((coordinates) => {
    const closedCoordinates = ensurePolygonClosed(coordinates);
    const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');
    const newPolygon = {
      id: `temp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
      coordinates: closedCoordinates,
      color: randomColor,
      crop: null,
      name: `–ù–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω ${new Date().toLocaleString()}`,
      comment: null
    };
    setPolygons((prev) => [...prev, newPolygon]);
    setIsDrawing(false);
    setDrawnPointsCount(0);
    setSelectedPolygon(newPolygon);
    showToast('–ü–æ–ª–∏–≥–æ–Ω –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ! –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', 'info');
    savePolygonToDatabase(newPolygon);
  }, [savePolygonToDatabase, showToast]);

  const updatePolygonColor = useCallback((polygonId, newColor) => {
    setPolygons((prev) => {
      const updatedPolys = prev.map((p) =>
        p.id === polygonId ? { ...p, color: newColor } : p
      );
      if (selectedPolygon && selectedPolygon.id === polygonId) {
        setSelectedPolygon(updatedPolys.find(p => p.id === polygonId));
      }
      return updatedPolys;
    });
  }, [selectedPolygon]);

  const deletePolygon = useCallback(async (id) => {
    const token = localStorage.getItem('token');
    if (!token) {
      showToast('–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'error');
      console.error('–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      if (handleLogout) {
        handleLogout();
      } else {
        navigate('/login');
      }
      return;
    }
    setPolygons((prev) => prev.filter((p) => p.id !== id));
    setSelectedPolygon(null);
    if (editingMapPolygon && editingMapPolygon.id === id) {
      setIsEditingMode(false);
      setEditingMapPolygon(null);
    }
    showToast('–ü–æ–ª–∏–≥–æ–Ω —É–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', 'info');
    try {
      const response = await fetch(`${BASE_API_URL}/api/polygons/delete/${id}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const responseBody = await parseResponseBody(response);
      if (!response.ok) {
        let errorMessage = response.statusText;
        if (typeof responseBody === 'object' && responseBody !== null && responseBody.message) {
          errorMessage = responseBody.message;
        } else if (typeof responseBody === 'string' && responseBody.length > 0) {
          errorMessage = responseBody;
        }
        showToast(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${errorMessage}`, 'error');
        if (response.status === 401 || response.status === 403) {
          if (handleLogout) {
            handleLogout();
          } else {
            navigate('/login');
          }
        }
        throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${errorMessage}`);
      }
      showToast('–ü–æ–ª–∏–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞!', 'success');
    } catch (error) {
      showToast(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª–∏–≥–æ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, 'error');
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ –∏–∑ –ë–î:', error);
    }
  }, [editingMapPolygon, showToast, handleLogout, navigate]);

  const confirmClearAll = useCallback(() => {
    setShowClearAllConfirm(true);
  }, []);

  const cancelClearAll = useCallback(() => {
    setShowClearAllConfirm(false);
    showToast('–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.', 'info');
  }, [showToast]);

  const handleClearAllConfirmed = useCallback(async () => {
    setShowClearAllConfirm(false);
    showToast('–ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤...', 'info');
    setPolygons([]);
    localStorage.removeItem('savedPolygons');
    setSelectedPolygon(null);
    setIsDrawing(false);
    setIsEditingMode(false);
    setEditingMapPolygon(null);
    editableFGRef.current?.clearLayers();
    showToast('–í—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã —É–¥–∞–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', 'info');
    const token = localStorage.getItem('token');
    if (!token) {
      showToast('–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'error');
      console.error('–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      if (handleLogout) {
        handleLogout();
      } else {
        navigate('/login');
      }
      return;
    }
    setIsSavingPolygon(true);
    try {
        const response = await fetch(`${BASE_API_URL}/api/polygons/clear-all`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        const responseBody = await parseResponseBody(response);
        if (!response.ok) {
            let errorMessage = response.statusText;
            if (typeof responseBody === 'object' && responseBody !== null && responseBody.message) {
              errorMessage = responseBody.message;
            } else if (typeof responseBody === 'string' && responseBody.length > 0) {
              errorMessage = responseBody;
            }
            showToast(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${errorMessage}`, 'error');
            if (response.status === 401 || response.status === 403) {
              if (handleLogout) {
                handleLogout();
              } else {
                navigate('/login');
              }
            }
            throw new Error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${errorMessage}`);
        }
        showToast('–í—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞!', 'success');
    } catch (error) {
        showToast(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, 'error');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ –ë–î:', error);
    } finally {
      setIsSavingPolygon(false);
    }
  }, [showToast, handleLogout, navigate]);

  const clearAll = useCallback(() => {
    if (polygons.length === 0) {
      showToast('–ù–∞ –∫–∞—Ä—Ç–µ –Ω–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', 'info');
      return;
    }
    confirmClearAll();
  }, [polygons.length, confirmClearAll, showToast]);

  const clearAllCrops = useCallback(() => {
    setPolygons((prev) => prev.map((p) => ({ ...p, crop: null, comment: null, color: '#0000FF' })));
    if (selectedPolygon) {
      setSelectedPolygon(prev => ({ ...prev, crop: null, comment: null, color: '#0000FF' }));
    }
    showToast('–í—Å–µ –∫—É–ª—å—Ç—É—Ä—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ü–≤–µ—Ç–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.', 'info');
  }, [showToast, selectedPolygon]);

  const updatePolygonCrop = useCallback((polygonId, newCrop) => {
    setPolygons((prev) => {
      const updatedPolys = prev.map((p) => (p.id === polygonId ? { ...p, crop: newCrop } : p));
      if (selectedPolygon && selectedPolygon.id === polygonId) {
        setSelectedPolygon(updatedPolys.find(p => p.id === polygonId));
      }
      return updatedPolys;
    });
  }, [selectedPolygon]);

  const updatePolygonName = useCallback((polygonId, newName) => {
    setPolygons((prev) => {
      const updatedPolys = prev.map((p) =>
        p.id === polygonId ? { ...p, name: newName } : p
      );
      if (selectedPolygon && selectedPolygon.id === polygonId) {
        setSelectedPolygon(updatedPolys.find(p => p.id === polygonId));
      }
      return updatedPolys;
    });
  }, [selectedPolygon]);

  const updatePolygonComment = useCallback((polygonId, newComment) => {
    setPolygons((prev) => {
      const updatedPolys = prev.map((p) =>
        p.id === polygonId ? { ...p, comment: newComment } : p
      );
      if (selectedPolygon && selectedPolygon.id === polygonId) {
        setSelectedPolygon(updatedPolys.find(p => p.id === polygonId));
      }
      return updatedPolys;
    });
  }, [selectedPolygon]);

  const onSelectAnalysisForPolygon = useCallback((polygonData, analysisType) => {
    if (selectedPolygon && selectedPolygon.id === polygonData.id && activeAnalysisType === analysisType) {
      setActiveAnalysisType('none');
      showToast(`–°–ª–æ–π "${analysisType}" –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω.`, 'info');
    } else {
      setSelectedPolygon(polygonData);
      setActiveAnalysisType(analysisType);
      
      const today = new Date();
      const twoMonthsAgo = new Date(today.getFullYear(), today.getMonth() - 2, today.getDate());
      setAnalysisDateRange({
        from: twoMonthsAgo.toISOString().split('T')[0],
        to: today.toISOString().split('T')[0]
      });
      showToast(`–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ—è "${analysisType}" –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞...`, 'info');
    }
  }, [selectedPolygon, activeAnalysisType, showToast]);

  const handleAnalysisLoadingChange = useCallback((isLoading) => {
    setIsAnalysisLoading(isLoading);
  }, []);

  const handleAnalysisError = useCallback((errorMessage) => {
    showToast(errorMessage, 'error');
    setActiveAnalysisType('none');
  }, [showToast]);


  const handleEditPolygon = useCallback((polygonId) => {
    setIsSavingPolygon(false);
    setIsFetchingPolygons(false);
    if (isDrawing) {
      setIsDrawing(false);
      if (window.clearCurrentPath) window.clearCurrentPath();
    }
    // –ù–ï –û–ß–ò–©–ê–ô–¢–ï editableFGRef.current –∑–¥–µ—Å—å. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç MapComponent –≤ —Å–≤–æ–µ–º useEffect.
    // if (editableFGRef.current) {
    //     editableFGRef.current.clearLayers();
    // }
    const polygonToEdit = polygons.find((p) => p.id === polygonId);
    if (!polygonToEdit) {
      console.error('Polygon for editing not found in state.');
      showToast('–ü–æ–ª–∏–≥–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.', 'error');
      return;
    }
    setIsEditingMode(true);
    setEditingMapPolygon(polygonToEdit);
    setSelectedPolygon(polygonToEdit);
    showToast(
      `üìç –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω. –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ –≤–µ—Ä—à–∏–Ω—ã –ø–æ–ª–∏–≥–æ–Ω–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Ñ–æ—Ä–º—É. –ù–∞–∂–º–∏—Ç–µ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å" –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.`,
      'info'
    );
  }, [polygons, isDrawing, showToast]);

  const handleStopAndSaveEdit = useCallback(() => { 
    if (isDrawing) { 
      if (window.clearCurrentPath) window.clearCurrentPath(); 
      stopDrawing(); 
      showToast('–†–∏—Å–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.', 'info'); 
    } 
    else if (isEditingMode) { 
      let updatedCoordinates = null;
      let leafletLayerToDisableEditing = null;

      if (editableFGRef.current) {
          editableFGRef.current.eachLayer(layer => {
              // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–∏–≥–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              if (layer instanceof L.Polygon) {
                  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ Leaflet —Å–ª–æ—è
                  updatedCoordinates = layer.toGeoJSON().geometry.coordinates[0].map(coord => [coord[1], coord[0]]);
                  leafletLayerToDisableEditing = layer; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–æ–π –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              }
          });
      }
      // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Leaflet —Å–ª–æ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ),
      // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è editingMapPolygon.
      if (!updatedCoordinates || updatedCoordinates.length === 0) {
          console.log("handleStopAndSaveEdit: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ Leaflet —Å–ª–æ—è. –ò—Å–ø–æ–ª—å–∑—É—é editingMapPolygon.coordinates.");
          updatedCoordinates = editingMapPolygon ? editingMapPolygon.coordinates : null;
      }

      if (!updatedCoordinates || updatedCoordinates.length === 0) {
          console.error("handleStopAndSaveEdit: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
          showToast('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.', 'error');
          return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      }

      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ø–æ–ª–∏–≥–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ polygons –ø–æ ID editingMapPolygon
      const currentPolygonInState = polygons.find(p => p.id === editingMapPolygon?.id);
      
      if (currentPolygonInState) { 
          const updatedPoly = { 
              ...currentPolygonInState, 
              coordinates: updatedCoordinates, 
          }; 
          
          setPolygons(prev => prev.map(p => p.id === updatedPoly.id ? updatedPoly : p)); 
          if (selectedPolygon && selectedPolygon.id === updatedPoly.id) { 
            setSelectedPolygon(updatedPoly); 
          } 
          
          // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Leaflet —Å–ª–æ–µ
          if (leafletLayerToDisableEditing && leafletLayerToDisableEditing.editing && leafletLayerToDisableEditing.editing.enabled()) {
              leafletLayerToDisableEditing.editing.disable();
              console.log('handleStopAndSaveEdit: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Leaflet —Å–ª–æ—è –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
          }

          showToast('–§–æ—Ä–º–∞ –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ! –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', 'info'); 
          savePolygonToDatabase(updatedPoly, true); 
      } else {
          console.error("handleStopAndSaveEdit: –ü–æ–ª–∏–≥–æ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ polygons.");
          showToast('–û—à–∏–±–∫–∞: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø–æ–ª–∏–≥–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.', 'error');
      }
      
      console.log('handleStopAndSaveEdit: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'); 
      setIsEditingMode(false); 
      setEditingMapPolygon(null); 
      editableFGRef.current?.clearLayers(); // –û—á–∏—â–∞–µ–º FeatureGroup –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      showToast('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.', 'success'); 
    } else { 
      showToast('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.', 'info'); 
    } 
  }, [isDrawing, stopDrawing, isEditingMode, editingMapPolygon, polygons, savePolygonToDatabase, showToast, selectedPolygon]);

  const onPolygonEdited = useCallback(async (e) => {
    console.log("onPolygonEdited: –°–æ–±—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–µ.");
    let editedLayers = e.layers;
    editedLayers.eachLayer((layer) => {
        if (layer instanceof L.Polygon) {
            const newCoordinates = layer.toGeoJSON().geometry.coordinates[0].map(coord => [coord[1], coord[0]]); // Leaflet to [lat, lng]
            console.log("onPolygonEdited: –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", newCoordinates);

            setPolygons(prevPolygons => {
                return prevPolygons.map(p => {
                    if (editingMapPolygon && p.id === editingMapPolygon.id) {
                        return { ...p, coordinates: newCoordinates };
                    }
                    return p;
                });
            });
            // –û–±–Ω–æ–≤–ª—è–µ–º editingMapPolygon, —á—Ç–æ–±—ã –æ–Ω –æ—Ç—Ä–∞–∂–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            setEditingMapPolygon(prev => prev ? { ...prev, coordinates: newCoordinates } : null);
        }
    });
    // onPolygonEdited –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ.
    // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º,
    // —Ç–æ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å savePolygonToDatabase.
    // setIsEditingMode(false); // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–¥–µ—Å—å, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    // setEditingMapPolygon(null); // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–µ—Å—å
    showToast('–§–æ—Ä–º–∞ –ø–æ–ª–∏–≥–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.', 'info');
  }, [editingMapPolygon, setPolygons, setEditingMapPolygon, showToast]);

  const showMyPolygons = useCallback(async (userIdToFetch = null) => {
    const fetchUrl = userIdToFetch ? `${BASE_API_URL}/api/polygons/user/${userIdToFetch}` : `${BASE_API_URL}/api/polygons/user`;
    showToast(`–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤${userIdToFetch ? ` –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdToFetch}` : ' —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} —Å —Å–µ—Ä–≤–µ—Ä–∞...`, 'info');
    const token = localStorage.getItem('token');
    if (!token) {
      showToast('–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'error');
      console.error('–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      if (handleLogout) {
        handleLogout();
      } else {
        navigate('/login');
      }
      return;
    }
    setIsFetchingPolygons(true);
    try {
        const response = await fetch(fetchUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        const data = await parseResponseBody(response);
        if (!response.ok) {
            let errorMessage = response.statusText;
            if (typeof data === 'object' && data !== null && data.message) {
              errorMessage = data.message;
            } else if (typeof data === 'string' && data.length > 0) {
              errorMessage = data;
            }
            showToast(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${errorMessage}`, 'error');
            if (response.status === 401 || response.status === 403) {
              if (handleLogout) {
                handleLogout();
              } else {
                navigate('/login');
              }
            }
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${errorMessage}`);
        }
        if (data && Array.isArray(data)) {
          const loadedPolygons = data.map(item => {
            let coordinates = [];
            let name = item.name || `–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω ${item.id || String(Date.now())}`;
            let crop = item.crop || null;
            let comment = item.comment || null;
            let color = item.color || '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');
            try {
              const geoJsonObj = JSON.parse(item.geoJson);
              if (geoJsonObj && geoJsonObj.type === "Polygon" && geoJsonObj.coordinates && geoJsonObj.coordinates[0]) {
                  coordinates = ensurePolygonClosed(geoJsonObj.coordinates[0].map(coord => [coord[1], coord[0]]));
              }
              else {
                  console.warn('Invalid GeoJSON Geometry structure for item (expected Polygon directly):', item);
              }
            } catch (e) {
              console.error('Failed to parse geoJson for item:', item, e);
              coordinates = [];
            }
            return {
              id: String(item.id),
              coordinates: coordinates,
              color: color,
              crop: crop,
              name: name,
              comment: comment
            };
          }).filter(p => p.coordinates.length >= 3);
          setPolygons(loadedPolygons);
          showToast(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loadedPolygons.length} –≤–∞—à–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞.`, 'success');
          setIsDrawing(false);
          setIsEditingMode(false);
          setEditingMapPolygon(null);
          editableFGRef.current?.clearLayers();
          setSelectedPolygon(null);
        } else {
          showToast('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤.', 'error');
          console.error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
        }
    } catch (error) {
        showToast(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∏ –ø–æ–ª–∏–≥–æ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, 'error');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
    } finally {
      setIsFetchingPolygons(false);
    }
  }, [showToast, handleLogout, navigate]);

  const fetchAllUsers = useCallback(async () => {
    const token = localStorage.getItem('token');
    if (!token) {
      console.warn("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
      return;
    }
    try {
      const response = await fetch(`${BASE_API_URL}/api/v1/admin/users`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      if (response.status === 403) {
        console.warn("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –∞–¥–º–∏–Ω.");
        setAllUsers([]);
        return;
      }
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.status} - ${errorText}`);
      }
      const data = await response.json();
      setAllUsers(data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
      setAllUsers([]);
    }
  }, [BASE_API_URL]);

  useEffect(() => {
    let loadedFromLocalStorage = false;
    try {
      const storedPolygons = localStorage.getItem('savedPolygons');
      if (storedPolygons !== null && storedPolygons !== '[]') {
        const parsedPolygons = JSON.parse(storedPolygons);
        if (Array.isArray(parsedPolygons) && parsedPolygons.every(p => p && p.coordinates && Array.isArray(p.coordinates) && p.coordinates.length >= 3 && 'comment' in p && 'color' in p)) {
          const closedPolygons = parsedPolygons.map(p => ({
            ...p,
            coordinates: ensurePolygonClosed(p.coordinates)
          }));
          setPolygons(closedPolygons);
          showToast('–ü–æ–ª–∏–≥–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.', 'success');
          loadedFromLocalStorage = true;
        } else {
          console.warn('Invalid polygons data format in localStorage. Clearing and attempting to load from server.', parsedPolygons);
          localStorage.removeItem('savedPolygons');
        }
      }
    } catch (error) {
      console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ localStorage. –û—á–∏—â–∞—é –∏ –ø—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞:", error);
      showToast('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞.', 'error');
      localStorage.removeItem('savedPolygons');
    }
    
    const token = localStorage.getItem('token');
    if (!token) {
        if (handleLogout) {
            handleLogout();
        } else {
            navigate('/login');
        }
        return;
    }

    try {
        const decodedToken = jwtDecode(token);
        const roles = decodedToken.roles;
        if (roles && Array.isArray(roles) && roles.includes('ROLE_ADMIN')) {
            setUserRole('ADMIN');
            fetchAllUsers();
        } else {
            setUserRole('USER');
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏:", error);
        setUserRole('GUEST');
        showToast('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ.', 'error');
        if (handleLogout) {
            handleLogout();
        } else {
            navigate('/login');
        }
        return;
    }

    if (!loadedFromLocalStorage) {
      showMyPolygons();
    }
  }, [showToast, showMyPolygons, handleLogout, navigate, fetchAllUsers]);

  const handleUserSelectForAdminView = useCallback((event) => {
    const userId = event.target.value;
    const user = allUsers.find(u => String(u.id) === userId); 
    setSelectedUserForAdminView(user || null);

    if (user) {
        showToast(`–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`, 'info');
        showMyPolygons(user.id);
    } else {
        showToast('–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞).', 'info');
        showMyPolygons(null);
    }
  }, [allUsers, showMyPolygons, showToast]);


  const finalSelectedPolygonData = selectedPolygon;

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é bottom –¥–ª—è UserSelectionBlock
  // –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ 40px –≤—ã—à–µ –≤–µ—Ä—Ö–∞ LayerSelectionBlock.
  // –í–µ—Ä—Ö LayerSelectionBlock –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ `window.innerHeight - (layerBlockInitialBottom + layerBlockHeight)`.
  // –ò–ª–∏ –ø—Ä–æ—â–µ, bottom UserSelectionBlock –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `layerBlockInitialBottom + layerBlockHeight + 40`.
  const userBlockCalculatedBottom = `${layerBlockInitialBottom + layerBlockHeight + 30}px`;

  return (
    <div style={{ display: 'flex', height: '100vh', width: '100vw', position: 'relative' }}>
      <MapComponent
        polygons={polygons}
        onPolygonComplete={onPolygonComplete}
        onPolygonEdited={onPolygonEdited}
        isDrawing={isDrawing}
        setIsDrawing={setIsDrawing}
        editableFGRef={editableFGRef} // <--- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ editableFGRef –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
        selectedPolygon={selectedPolygon}
        setSelectedPolygon={setSelectedPolygon}
        isEditingMode={isEditingMode}
        editingMapPolygon={editingMapPolygon}
        analysisDateRange={analysisDateRange}
        onLoadingChange={handleAnalysisLoadingChange}
        onError={handleAnalysisError}
        onPointAdded={() => { /* Placeholder for future use */ }}
        activeBaseMapType={activeBaseMapType}
      />

      <MapSidebar
        polygons={polygons}
        selectedPolygon={selectedPolygon}
        setSelectedPolygon={setSelectedPolygon}
        deletePolygon={deletePolygon}
        handleEditPolygon={handleEditPolygon}
        clearAllCrops={clearAllCrops}
        calculateArea={calculateArea}
        formatArea={formatArea}
        updatePolygonCrop={updatePolygonCrop}
        startDrawing={startDrawing}
        stopDrawing={stopDrawing}
        handleStopAndSaveEdit={handleStopAndSaveEdit}
        isDrawing={isDrawing}
        isEditingMode={isEditingMode}
        clearAll={clearAll}
        handleLogout={handleLogout}
        showMyPolygons={showMyPolygons}
        updatePolygonName={updatePolygonName}
        updatePolygonComment={updatePolygonComment}
        updatePolygonColor={updatePolygonColor}
        isSavingPolygon={isSavingPolygon}
        isFetchingPolygons={isFetchingPolygons}
        showCropsSection={true}        
        savePolygonToDatabase={savePolygonToDatabase}
        BASE_API_URL={BASE_API_URL}
        userRole={userRole}
        allUsers={allUsers}
        selectedUserForAdminView={selectedUserForAdminView}
        handleUserSelectForAdminView={handleUserSelectForAdminView}
      />

      <ToastNotification
        message={toast.message}
        type={toast.type}
        visible={toast.visible}
      />

      {showClearAllConfirm && (
        <ConfirmDialog
          message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø–æ–ª–∏–≥–æ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
          onConfirm={handleClearAllConfirmed}
          onCancel={cancelClearAll}
          isProcessing={isSavingPolygon}
        />
      )}

      {finalSelectedPolygonData && activeAnalysisType && activeAnalysisType !== 'none' && (
        <PolygonAnalysisLayer
          selectedPolygonData={finalSelectedPolygonData}
          activeAnalysisType={activeAnalysisType}
          analysisDateRange={analysisDateRange}
          onLoadingChange={handleAnalysisLoadingChange}
          onError={handleAnalysisError}
        />
      )}

      {isAnalysisLoading && (
        <div style={{
          position: 'absolute', bottom: '35px', left: '50%', transform: 'translateX(-50%)',
          backgroundColor: 'rgba(0, 0, 0, 0.7)', color: 'white', padding: '10px 20px',
          borderRadius: '8px', zIndex: 1000, fontSize: '14px', textAlign: 'center',
        }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ—è...
        </div>
      )}

      {userRole === 'ADMIN' && (
        <UserSelectionBlock
          userRole={userRole}
          allUsers={allUsers}
          selectedUserForAdminView={selectedUserForAdminView}
          handleUserSelectForAdminView={handleUserSelectForAdminView}
          calculatedBottom={userBlockCalculatedBottom} // –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ bottom
        />
      )}

      <LayerSelectionBlock
        selectedPolygonData={finalSelectedPolygonData}
        activeBaseMapType={activeBaseMapType}
        onSelectBaseMap={setActiveBaseMapType}
        activeAnalysisType={activeAnalysisType}
        onSelectAnalysisForPolygon={onSelectAnalysisForPolygon}
        setBlockHeight={setLayerBlockHeight} // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—Å–µ—Ç—Ç–µ—Ä
      />
    </div>
  );
}
